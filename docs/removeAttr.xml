<entry type='method' name="removeAttr" return="jQuery">
  <signature>
    <added>1.0</added>
    <argument name="attributeName" type="String">
      <desc>An attribute to remove; as of version 1.7, it can be a space-separated list of attributes.</desc>
    </argument>
  </signature>
  <desc>Remove an attribute from each element in the set of matched elements.</desc>
  <longdesc><p>The <code>.removeAttr()</code> method uses the JavaScript <code>removeAttribute()</code> function, but it has the advantage of being able to be called directly on a jQuery object and it accounts for different attribute naming across browsers.</p>
<p><strong>Note:</strong> Removing an inline <code>onclick</code> event handler using <code>.removeAttr()</code> doesn't achieve the desired effect in Internet Explorer 6, 7, or 8. To avoid potential problems, use <code>.prop()</code> instead:</p>
<pre>
$element.prop("onclick", null);
console.log("onclick property: ", $element[0].onclick);
</pre>
</longdesc>
  <example>
    <desc>Clicking the button enables the input next to it.</desc>
    <code><![CDATA[
(function() {
  var inputTitle = $("input").attr("title");
  $("button").click(function () {
    var input = $(this).next();

    if ( input.attr("title") == inputTitle ) {
      input.removeAttr("title")
    } else {
      input.attr("title", inputTitle);
    }

    $("#log").html( "input title is now " + input.attr("title") );
  });
})();
]]></code>
      <html><![CDATA[<button>Enable</button>
<input type="text" title="hello there" />
<div id="log"></div>
]]></html>
    </example>
  </entry>