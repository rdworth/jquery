<entry type='method' name="load" return="jQuery">
  <signature>
    <added>1.0</added>
    <argument name="url" type="String">
      <desc>A string containing the URL to which the request is sent.</desc>
    </argument>
    <argument name="data" optional="true " type="Map, String">
      <desc>A map or string that is sent to the server with the request.</desc>
    </argument>
    <argument name="complete(responseText, textStatus, XMLHttpRequest)" type="Function" optional="true">
      <desc>A callback function that is executed when the request completes.</desc>
    </argument>
  </signature>
  <desc>Load data from the server and place the returned HTML into the matched element.</desc>
  <longdesc>
    <p>This method is the simplest way to fetch data from the server. It is roughly equivalent to <code>$.get(url, data, success)</code> except that it is a method rather than global function and it has an implicit callback function.  When a successful response is detected (i.e. when <code>textStatus</code> is "success" or "notmodified"), <code>.load()</code> sets the HTML contents of the matched element to the returned data. This means that most uses of the method can be quite simple:</p>
    <pre>$('#result').load('ajax/test.html');</pre>
    <p>The provided callback, if any, is executed after this post-processing has been performed:</p>
    <pre>$('#result').load('ajax/test.html', function() {
  alert('Load was performed.');
});</pre>
    <p>In the two examples above, if the current document does not contain an element with an ID of "result," the <code>.load()</code> method is not executed.</p>
    <p>The POST method is used if data is provided as an object; otherwise, GET is assumed.</p>

    <blockquote><p>Note: The event handling suite also has a method named <code><a href='/load-event'>.load()</a></code>. Which one is fired depends on the set of arguments passed.</p></blockquote>
    <h4>Loading Page Fragments</h4>
    <p>The <code>.load()</code> method, unlike <code><a href='/jQuery.get'>$.get()</a></code>, allows us to specify a portion of the remote document to be inserted. This is achieved with a special syntax for the <code>url</code> parameter. If one or more space characters are included in the string, the portion of the string following the first space is assumed to be a jQuery selector that determines the content to be loaded.   </p>
    <p>We could modify the example above to use only part of the document that is fetched:</p>
    <pre>$('#result').load('ajax/test.html #container');</pre>
    <p>When this method executes, it retrieves the content of <code>ajax/test.html</code>, but then jQuery parses the returned document to find the element with an ID of <code>container</code>. This element, along with its contents, is inserted into the element with an ID of <code>result</code>, and the rest of the retrieved document is discarded.</p>
<p>jQuery uses the browser's <code>.innerHTML</code> property to parse the retrieved document and insert it into the current document. During this process, browsers often filter elements from the document such as <code>&lt;html&gt;</code>, <code>&lt;title&gt;</code>, or <code>&lt;head&gt;</code> elements. As a result, the elements retrieved by <code>.load()</code> may not be exactly the same as if the document were retrieved directly by the browser.</p>

<blockquote><p><strong>Note:</strong> When calling <code>.load()</code> using a URL without a suffixed selector expression, the content is passed to <code>.html()</code> prior to scripts being removed. This executes the script blocks before they are discarded. If <code>.load()</code> is however called with a selector expression appended to the URL, the scripts are stripped out prior to the DOM being updated, which is why they are never executed. An example of both cases can be seen below:
</p></blockquote>
<p>Here, any JavaScript loaded into <code>#a</code> as a part of the document will successfully execute.</p>
<pre>
$('#a').load('article.html');
</pre>
<p>However in this case, script blocks in the document being loaded into <code>#b</code> are stripped out prior to being executed:</p>
<pre>
$('#b').load('article.html #target');
</pre>

  </longdesc>
  <example>
    <desc>Load the main page's footer navigation into an ordered list.</desc>
    <code><![CDATA[
  $("#new-nav").load("/ #jq-footerNavigation li");
]]></code>
    <css><![CDATA[
 body{ font-size: 12px; font-family: Arial; }
 ]]></css>
    <html><![CDATA[
<b>Footer navigation:</b>
<ol id="new-nav"></ol>
]]></html>
  </example>
    <example>
      <desc>Display a notice if the Ajax request encounters an error.</desc>
      <code><![CDATA[
$("#success").load("/not-here.php", function(response, status, xhr) {
  if (status == "error") {
    var msg = "Sorry but there was an error: ";
    $("#error").html(msg + xhr.status + " " + xhr.statusText);
  }
});
  ]]></code>
<css><![CDATA[
  body{ font-size: 12px; font-family: Arial; }
  ]]></css>
<html><![CDATA[
<b>Successful Response (should be blank):</b>
<div id="success"></div>
<b>Error Response:</b>
<div id="error"></div>
  ]]></html>
    </example>
  
  <example>
    <desc>Load the feeds.html file into the div with the ID of feeds.</desc>
    <code><![CDATA[$("#feeds").load("feeds.html");]]></code>
    <results><![CDATA[<div id="feeds"><b>45</b> feeds found.</div>]]></results>
  </example>
  <example>
    <desc>pass arrays of data to the server.</desc>
    <code><![CDATA[$("#objectID").load("test.php", { 'choices[]': ["Jon", "Susan"] } );]]></code>
  </example>
  <example>
    <desc>Same as above, but will POST the additional parameters to the server and a callback that is executed when the server is finished responding.</desc>
    <code><![CDATA[$("#feeds").load("feeds.php", {limit: 25}, function(){
alert("The last 25 entries in the feed have been loaded");
});]]></code>
  </example>
</entry>